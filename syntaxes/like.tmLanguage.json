{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Like",
  "patterns": [
    {
      "include": "#keywords"
    },
    {
      "include": "#primitives"
    },
    {
      "match": "\\b(fun)\\s+([\\w]+)\\b",
      "captures": {
        "1": {
          "name": "storage.type.function.like"
        },
        "2": {
          "name": "entity.name.function.like"
        }
      }
    },
    {
      "include": "#multilinecomments"
    },
    {
      "include": "#strings"
    },
    {
      "name": "comment.line.like",
      "match": "(//.*$)",
      "captures": {
        "1": {
          "name": "punctuation.definition.comment.like"
        }
      }
    },
    {
      "include": "#operators"
    },
    {
      "include": "#brackets"
    },
    {
      "match": "\\b(reset|rewrite|getln|putln|put|get|chr|ord|eoln|eof|assign)\\b",
      "name": "support.function.builtin.like"
    },
    {
      "match": "\\b(true|false)\\b",
      "name": "constant.language.like"
    },
    {
      "match": "\\b(true|false)\\b",
      "name": "constant.language.like"
    },
    {
      "include": "#delimiters"
    },
    {
      "match": "\\b[0-9]+\\b",
      "captures": {
        "0": {
          "name": "constant.numeric.number.like"
        }
      }
    }
  ],
  "repository": {
    "multilinecomments": {
      "name": "comment.line.like",
      "patterns": [
        {
          "name": "comment.block.like",
          "begin": "(\\/\\*)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.comment.like"
            }
          },
          "end": "(\\*\\/)",
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.comment.like"
            }
          }
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.like",
          "match": "\\b(if|or|not|then|else|of|end|file|if|while|repeat|choose|elseif|is|like|public|using|when)\\b"
        }
      ]
    },
    "primitives": {
      "patterns": [
        {
          "name": "storage.type.primitive.like",
          "match": "\\b(var|val|pkg)\\b"
        }
      ]
    },
    "strings": {
      "name": "string.quoted.double.like",
      "begin": "\"",
      "end": "\"",
      "patterns": [
        {
          "name": "constant.character.escape.like",
          "match": "\\\\."
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "match": "\\-\\-",
          "name": "keyword.operator.decrement.like"
        },
        {
          "match": "\\+\\+",
          "name": "keyword.operator.increment.like"
        },
        {
          "match": "(==|!=|<=|>=|>|<)",
          "name": "keyword.operator.comparison.like"
        },
        {
          "match": "(&&|\\|\\||!)",
          "name": "keyword.operator.logical.like"
        },
        {
          "match": "(=|\\+=|\\-=|\\*=|/=|%=)",
          "name": "keyword.operator.assignment.like"
        },
        {
          "name": "keyword.operator.arithmetic.like",
          "match": "(\\+|\\-|\\*|/|%)"
        },
        {
          "match": "(\\||#)",
          "name": "keyword.operator.string.like"
        }
      ]
    },
    "brackets": {
      "patterns": [
        {
          "begin": "\\(",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.begin.bracket.round.like"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.end.bracket.round.like"
            }
          },
          "patterns": [
            {
              "include": "$self"
            },
            {
              "match": "\\w",
              "name": "variable.parameter"
            }
          ]
        },
        {
          "match": "\\[|\\]",
          "name": "punctuation.definition.bracket.square.like"
        }
      ]
    },
    "delimiters": {
      "patterns": [
        {
          "match": ",",
          "name": "punctuation.other.comma.like"
        },
        {
          "match": ":",
          "name": "punctuation.other.colon.like"
        },
        {
          "match": ";",
          "name": "punctuation.other.semicolon.like"
        }
      ]
    }
  },
  "scopeName": "source.like"
}
